Specification:

When the software starts, it displays the empty 15 x 15 grids.  At the each grid, either Black or White stone (circle) can be placed.
Each player takes 32 disks and chooses one color to use throughout the game.
Black place a disk first followed by white placing a disk.   
players take turns in putting their disks on the board.
The game ends when one of player archived an unbroken row of five stones in the same color.


From those specifications, this game involves two players and a chess board. At first, players could
conceptualise to a Player model class, which store the necessary informations, in this case, it should have a counter for the number
of steps a player plays, maximum disks the player can have and the colour of disk the player owns.
And also, a list of step is recored in order to keep track of steps the player plays. A player has a action for place a disk,
which acutally stores the data for a step(placeDisk), unless the player uses up the disks which is determined by runUpDisk menthod.

Secondly, a chess board conceptualizes to a GameBoard model class, that has a 2-dimension array simulates the disk board,
indicating the horizontal and vertical position of each grid in the board. GameBoard has a action for storing the disks in the board(modifyBoard),
a check action(validMove) for each steps is valid in the game before storing the disks data in the array,
and a visual action(drawBoard) for displaying the board on the screen.

What's more, A Game class take the responsibility for controlling the round of a game. Initialise a game by creating a
board and 2 players. Then, take a turn for each move which including the actions for players and the gameBoard. Check the state
of game and report the result of a game if it comes to end, such as draw or win, if not, then contine. The state is done by
contine method.

For each step a player plays, it models to a Step class, that stores the horizontal and vertical locaiton,
and colour of disk is placed in the board.